# azure-pipelines.yml  (solo UNO)
trigger: none
pr: none

pool:
  vmImage: ubuntu-latest

steps:
- checkout: self
  persistCredentials: false

- task: Bash@3
  displayName: Detectar/crear ramas en GitHub
  inputs:
    targetType: inline
    script: |
      set -euo pipefail
      owner="$(GITHUB_OWNER)"
      repo="$(GITHUB_REPO)"
      api="https://api.github.com"
      auth="Authorization: Bearer $(GITHUB_PAT)"

      # default branch
      default=$(curl -fsSL -H "$auth" "$api/repos/$owner/$repo" | jq -r .default_branch)
      echo "Default=$default"

      # ramas existentes
      mapfile -t heads < <(curl -fsSL -H "$auth" "$api/repos/$owner/$repo/branches?per_page=100" | jq -r '.[].name' | tr '[:upper:]' '[:lower:]')
      have(){ local x="$(echo "$1" | tr '[:upper:]' '[:lower:]')"; printf '%s\n' "${heads[@]}" | grep -qx "$x"; }

      devName="developer"; have develop && devName="develop"; have developer && devName="developer"
      qaName="QA";         have qa && qaName="qa";         have QA        && qaName="QA"

      sha=$(curl -fsSL -H "$auth" "$api/repos/$owner/$repo/git/ref/heads/$default" | jq -r .object.sha)
      create_ref () {
        local name="$1"
        if have "$name"; then echo "Rama $name ya existe"; return; fi
        echo "Creando $name desde $default"
        curl -fsSL -X POST -H "$auth" -H "Content-Type: application/json" \
          -d "{\"ref\":\"refs/heads/$name\",\"sha\":\"$sha\"}" \
          "$api/repos/$owner/$repo/git/refs" >/dev/null
      }
      create_ref "$devName"
      create_ref "$qaName"

      echo "##vso[task.setvariable variable=PrimaryBranch]$default"
      echo "##vso[task.setvariable variable=DevBranch]$devName"
      echo "##vso[task.setvariable variable=QaBranch]$qaName"

- task: Bash@3
  displayName: Generar YAML final (archivo separado)
  inputs:
    targetType: inline
    script: |
      set -euo pipefail
      cat > "$(Build.SourcesDirectory)/azure-pipelines.generated.yml" <<'__YAML__'
      trigger:
        - $(PrimaryBranch)
        - $(DevBranch)
        - $(QaBranch)

      pr:
        - $(DevBranch)
        - $(QaBranch)

      pool:
        vmImage: ubuntu-latest

      stages:
      - stage: Build
        jobs:
        - job: BuildApp
          steps:
          - script: echo Construyendo desde rama $(Build.SourceBranchName)
            displayName: Build

      - stage: DeployDev
        condition: eq(variables['Build.SourceBranch'], format('refs/heads/{0}', variables['DevBranch']))
        dependsOn: Build
        jobs:
        - job: Deploy
          steps:
          - script: echo Deploy a Desarrollo
            displayName: Deploy Dev

      - stage: DeployQA
        condition: eq(variables['Build.SourceBranch'], format('refs/heads/{0}', variables['QaBranch']))
        dependsOn: Build
        jobs:
        - job: Deploy
          steps:
          - script: echo Deploy a QA
            displayName: Deploy QA
      __YAML__

- task: PublishPipelineArtifact@1
  displayName: Publicar YAML generado
  inputs:
    targetPath: '$(Build.SourcesDirectory)/azure-pipelines.generated.yml'
    artifact: 'pipeline-config'
    publishLocation: 'pipeline'
