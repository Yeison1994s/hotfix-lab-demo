# Pipeline bootstrap sin variables externas ni PAT
trigger: none
pr: none

pool:
  vmImage: ubuntu-latest

steps:
- checkout: self
  persistCredentials: true   # Azure persiste el token de GitHub en git-credentials

- task: Bash@3
  displayName: Detectar/crear ramas en GitHub solo con git
  inputs:
    targetType: inline
    script: |
      set -euo pipefail

      # 1) Rama por defecto remota (origin/HEAD)
      default="$(git remote show origin | awk '/HEAD branch/ {print $NF}')"
      if [ -z "$default" ]; then
        echo "No pude detectar rama por defecto"; exit 1
      fi
      echo "Default=$default"

      # 2) Ramas existentes en origin
      mapfile -t heads < <(git ls-remote --heads origin | awk '{print $2}' | sed 's#refs/heads/##' | tr '[:upper:]' '[:lower:]')
      have(){ local x="$(echo "$1" | tr '[:upper:]' '[:lower:]')"; printf '%s\n' "${heads[@]}" | grep -qx "$x"; }

      # 3) Decidir nombres canónicos sin importar mayúsculas
      devName="developer"; have develop && devName="develop"; have developer && devName="developer"
      qaName="QA";         have qa && qaName="qa";          have QA        && qaName="QA"

      echo "Dev=$devName  QA=$qaName"

      # 4) Crear ramas que falten desde la default, usando el token persistido
      git fetch --prune origin "+refs/heads/*:refs/remotes/origin/*"

      create_branch () {
        local name="$1"
        if have "$name"; then
          echo "Rama $name ya existe"
        else
          echo "Creando $name desde $default"
          git branch -f "$name" "origin/$default"
          git push origin "refs/heads/$name:refs/heads/$name"
        fi
      }

      create_branch "$devName"
      create_branch "$qaName"

      echo "##vso[task.setvariable variable=PrimaryBranch]$default"
      echo "##vso[task.setvariable variable=DevBranch]$devName"
      echo "##vso[task.setvariable variable=QaBranch]$qaName"

- task: Bash@3
  displayName: Generar YAML final en archivo separado
  inputs:
    targetType: inline
    script: |
      set -euo pipefail
      cat > "$(Build.SourcesDirectory)/azure-pipelines.generated.yml" <<'__YAML__'
      trigger:
        - $(PrimaryBranch)
        - $(DevBranch)
        - $(QaBranch)

      pr:
        - $(DevBranch)
        - $(QaBranch)

      pool:
        vmImage: ubuntu-latest

      stages:
      - stage: Build
        jobs:
        - job: BuildApp
          steps:
          - script: echo Construyendo desde rama $(Build.SourceBranchName)
            displayName: Build

      - stage: DeployDev
        condition: eq(variables['Build.SourceBranch'], format('refs/heads/{0}', variables['DevBranch']))
        dependsOn: Build
        jobs:
        - job: Deploy
          steps:
          - script: echo Deploy a Desarrollo
            displayName: Deploy Dev

      - stage: DeployQA
        condition: eq(variables['Build.SourceBranch'], format('refs/heads/{0}', variables['QaBranch']))
        dependsOn: Build
        jobs:
        - job: Deploy
          steps:
          - script: echo Deploy a QA
            displayName: Deploy QA
      __YAML__

- task: PublishPipelineArtifact@1
  displayName: Publicar YAML generado
  inputs:
    targetPath: '$(Build.SourcesDirectory)/azure-pipelines.generated.yml'
    artifact: 'pipeline-config'
    publishLocation: 'pipeline'
